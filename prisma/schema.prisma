datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizResults   QuizResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizResult {
  id              String    @id @default(cuid())
  userId          String
  questionCount   Int
  errorCount      Int
  answerCount     Int
  currentQuestion Int

  isActive        Boolean   @default(false)

  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id              String    @id @default(cuid())
  name            String
  questions        Question[]

  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
}

model Question {
  id                String    @id @default(cuid())
  categoryId        String
  question          String
  correctAnswer    String    @map(name: "correct_answer")
  difficulty        QuestionDifficultyEnum
  incorrectAnswers String[]   @map(name: "incorrect_answers")

  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")

  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum QuestionDifficultyEnum {
  HARD
  MEDIUM
  EASY
}
